---
const { grid = true, fill = true } = Astro.props
---

<article
  class:list={[
    { grid, fill },
    "prose min-w-fit dark:prose-dark prose-a:underline-offset-4 prose-a:decoration-1 prose-a:decoration-dotted leading-loose tracking-wide"
  ]}
>
  <slot />
</article>

<style>
  .prose :global(> *:only-child) {
    /** 子要素がoverflowしないように */
    min-height: 0;
    min-width: 0; /** for Firefox */
  }

  .prose :global(> * + img) {
    margin-block-start: 3em;
    margin-block-end: 0;
  }
  .prose :global(> *:has(img)) {
    margin-block-start: 3em;
    margin-block-end: 0;
  }
  .prose :global(> *:has(img) + *) {
    margin-block-start: 3em;
    margin-block-end: 0;
  }
  .prose :global(> *:has(img) > img) {
    margin: 0;
  }

  article.prose:has(*) {
    max-width: inherit;
  }

  .prose :global(> * > :first-child) {
    margin-top: 0;
  }

  .prose > :global(:where(h1, h2, h3, h4, h5, h6)):first-child {
    margin-top: 0;
  }

  .prose :global(p > code) {
    color: inherit;
    padding: 0.3em 0.5em;
    background-color: rgba(210, 218, 255, 0.15);
    border-radius: 1em;
  }
  :global(.dark) .prose :global(p > code) {
    background-color: rgba(0, 0, 0, 0.2);
  }
  .prose :global(:not(pre) > code)::before {
    display: none;
  }
  .prose :global(:not(pre) > code)::after {
    display: none;
  }

  .prose.grid:has(*) {
    --px: 3vw;
    --py: 3vh;
    position: relative;
    padding: calc(max(var(--px), var(--py)) * 2.5);
    margin-inline: -1rem;
  }

  .prose.grid:has(*):lang(en) {
    --px: 2vw;
    --py: 2vh;
  }

  .prose.grid:has(*)::before {
    content: "";
    position: absolute;
    inset: 0;
    z-index: -1;

    --line-color: #e8e5e3;
    background-image: linear-gradient(180deg, transparent 96%, var(--line-color) 100%),
      linear-gradient(90deg, transparent 96%, var(--line-color) 100%);
    background-size: 1em 1em;
    -webkit-mask-origin: padding-box;
    -webkit-mask-composite: source-in;
    -webkit-mask-image: linear-gradient(
        to right,
        rgba(0, 0, 0, 0) 0%,
        white calc(var(--px) * 2),
        white calc(100% - var(--px) * 2),
        rgba(0, 0, 0, 0) 100%
      ),
      linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 0%,
        white calc(var(--py) * 2),
        white calc(100% - var(--py) * 2),
        rgba(0, 0, 0, 0) 100%
      );
  }

  :global(.dark) .prose.grid:has(*)::before {
    --line-color: #475569;
    background-color: transparent;
  }

  .prose.grid:has(*) :global(> *:not(img)) {
    margin-inline: -1rem;
  }

  .prose.fill:has(*)::before {
    background-color: #f4f6ff;
  }

  :global(.dark) .prose.fill:has(*)::before {
    background-color: transparent;
  }
</style>
